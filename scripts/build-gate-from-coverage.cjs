#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function escapeRegex(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function buildGateFromCoverage() {
  const coveragePath = path.join(__dirname, '..', 'data', 'specs', 'apex-coverage.json');
  const outputPath = path.join(__dirname, '..', 'services', 'common', 'intent-gate.cjs');
  
  if (!fs.existsSync(coveragePath)) {
    console.error(`Coverage file not found: ${coveragePath}`);
    process.exit(1);
  }
  
  const coverageData = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
  const coverage = coverageData.faqs || [];
  
  const categories = ['withdrawals', 'pricing', 'payment_methods', 'rules', 'platforms', 'discounts'];
  const buckets = {};
  
  categories.forEach(cat => {
    buckets[cat] = [];
  });
  
  coverage.forEach(faq => {
    const category = faq.category;
    if (!categories.includes(category)) {
      console.warn(`Skipping unknown category: ${category} for FAQ: ${faq.slug}`);
      return;
    }
    
    if (faq.deprecated) {
      return;
    }
    
    const patterns = [];
    
    if (faq.slug) {
      patterns.push(new RegExp(escapeRegex(faq.slug), 'i'));
    }
    
    if (faq.aliases && Array.isArray(faq.aliases)) {
      faq.aliases.forEach(alias => {
        patterns.push(new RegExp(escapeRegex(alias), 'i'));
      });
    }
    
    buckets[category].push(...patterns);
  });
  
  const bucketsObj = {};
  categories.forEach(cat => {
    bucketsObj[cat] = buckets[cat].map(r => r.source);
  });
  
  const content = `/* AUTO-GENERATED by build-gate-from-coverage.cjs â€” DO NOT EDIT MANUALLY */
const buckets = {
${categories.map(cat => {
  const patterns = bucketsObj[cat];
  return `  ${cat}: [${patterns.map(p => `/${p}/i`).join(', ')}]`;
}).join(',\n')}
};

const order = ${JSON.stringify(categories)};

function gateIntent(query) {
  const q = String(query || '').toLowerCase();
  const hits = order.filter(k => buckets[k].some(r => r.test(q)));
  return hits.length ? hits : order;
}

module.exports = { gateIntent };
`;
  
  fs.writeFileSync(outputPath, content);
  console.log(`Intent gate generated: ${outputPath}`);
  console.log('Categories:', categories);
  Object.entries(buckets).forEach(([cat, patterns]) => {
    console.log(`  ${cat}: ${patterns.length} patterns`);
  });
}

if (require.main === module) {
  buildGateFromCoverage();
}

module.exports = { buildGateFromCoverage };